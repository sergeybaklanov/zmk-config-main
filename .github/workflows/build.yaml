name: Build custom ZMK Firmware
on:
  - push
  - pull_request
jobs:
  matrix:
    runs-on: ubuntu-latest
    name: Fetch keyboard list
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install yaml2json
        run: python3 -m pip install remarshal
      - id: set-matrix
        name: Fetch Build Matrix
        run: |
          matrix=$(yaml2json build.yaml | jq -c .)
          yaml2json build.yaml
          echo "::set-output name=matrix::${matrix}"
  build:
    runs-on: ubuntu-latest
    name: Build keyboards
    container:
      image: zmkfirmware/zmk-build-arm:stable
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.matrix.outputs.matrix)}}
    needs: matrix

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cache west modules
        uses: actions/cache@v2
        env:
          cache-name: cache-zephyr-modules
        with:
          path: |
            modules/
            tools/
            zephyr/
            bootloader/
            zmk/
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('config/west.yml') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
        timeout-minutes: 2
        continue-on-error: true


      - name: Initialize workspace (west init)
        run: west init -l config
      - name: Update modules (west update)
        run: west update
      - name: Export Zephyr CMake package (west zephyr-export)
        run: west zephyr-export


      - name: Prepare variables
        id: variables
        run: |
          SHIELD_ARG=
          ARTIFACT_NAME="${{ matrix.board }}"

          if [ -n "${{ matrix.shield }}" ]; then
            SHIELD_ARG="-DSHIELD=${{ matrix.shield }}"
            ARTIFACT_NAME="${ARTIFACT_NAME}-${{ matrix.shield }}"
          fi

          if [ -n "${{ matrix.keymap }}" ]; then
            SHIELD_ARG="${SHIELD_ARG} -DKEYMAP_FILE=${GITHUB_WORKSPACE}/${{ matrix.keymap }}"
          fi

          ARTIFACT_NAME="${ARTIFACT_NAME}-zmk"

          echo ::set-output name=shield-arg::${SHIELD_ARG}
          echo ::set-output name=artifact-name::${ARTIFACT_NAME}


      - name: Build debug images (west build)
        run: west build -s zmk/app -p -b ${{ matrix.board }} -- ${{ steps.variables.outputs.shield-arg }}
          -DZMK_CONFIG="${GITHUB_WORKSPACE}/config" -DCONFIG_ZMK_USB_LOGGING=y
      - name: Generated zephyr DTS file
        if: always()
        run: cat -n build/zephyr/zephyr.dts
      - name: Generated config file
        if: always()
        run: cat -n build/zephyr/include/generated/autoconf.h
      - name: Rename artifacts
        run: |
          mkdir build/artifacts
          if [ -f build/zephyr/zmk.uf2 ]
          then
            cp build/zephyr/zmk.uf2 "build/artifacts/${{ steps.variables.outputs.artifact-name }}-debug.uf2"
          elif [ -f build/zephyr/zmk.hex ]
          then
            cp build/zephyr/zmk.hex "build/artifacts/${{ steps.variables.outputs.artifact-name }}-debug.hex"
          fi
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.variables.outputs.artifact-name }}-debug
          path: build/artifacts
        continue-on-error: true


      - name: Build release images (west build)
        run: west build -s zmk/app -p -b ${{ matrix.board }} -- ${{ steps.variables.outputs.shield-arg }}
          -DZMK_CONFIG="${GITHUB_WORKSPACE}/config"
      - name: Rename artifacts
        run: |
          mkdir build/artifacts
          if [ -f build/zephyr/zmk.uf2 ]
          then
            cp build/zephyr/zmk.uf2 "build/artifacts/${{ steps.variables.outputs.artifact-name }}.uf2"
          elif [ -f build/zephyr/zmk.hex ]
          then
            cp build/zephyr/zmk.hex "build/artifacts/${{ steps.variables.outputs.artifact-name }}.hex"
          fi
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.variables.outputs.artifact-name }}
          path: build/artifacts

